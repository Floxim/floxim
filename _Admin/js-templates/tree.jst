<!--[input ? _c.type =='tree']-->
<div class="fx_tree">
<input type="hidden" <?=$t.field_id_name(_c)?> class="tree_value_input"/>
<?=$t.tree_children(_c,{is_expanded:true})?>
</div>


<!--jquery-->
var tree_open_node = {};
function fx_tree_render(root) {
    function expand_item(item) {
        get_children(item).addClass('fx_tree_children_expanded');
        get_expander(item).addClass('fx_tree_expander_expanded');
        tree_open_node[item.data('id')] = true;
    }

    function collapse_item(item) {
        get_children(item).removeClass('fx_tree_children_expanded');
        get_expander(item).removeClass('fx_tree_expander_expanded');
        tree_open_node[item.data('id')] = false;
    }
	
    function is_expanded(item) {
        return get_children(item).hasClass('fx_tree_children_expanded');
    }
	
    function get_children(item) {
        return item.find('>ul');
    }
	
    function get_expander(item) {
        return item.find('.fx_tree_expander').first();
    }
	
    function toggle_item(item) {
        is_expanded(item) ? collapse_item(item) : expand_item(item);
    }
	
    root.on('click', '.fx_tree_expander', function() {
            toggle_item($(this).closest('.fx_tree_item'));
    }); 

    var tree_root = $('>ul', root);
    tree_root.nestedSortable({
            disableNesting: 'no-nest',
            distance:5,
            forcePlaceholderSize: true,
            handle: 'div',
            helper:	'clone',
            items: 'li.fx_tree_item',
            maxLevels: 10,
            opacity: .6,
            placeholder: 'placeholder',
            revert: 0,
            tabSize: 25,
            tolerance: 'pointer',
            toleranceElement: '> div',
            listType:'ul',
            start: function(e, ui) {
                    collapse_item(ui.helper);
                    collapse_item(ui.item);
                    ui.helper.css({height:'auto'});
                    ui.placeholder.css({height:ui.helper.height()+'px'});
                    setTimeout(function() {
                            tree_root.nestedSortable('refreshPositions');
                    }, 100);
            },
            change: function(e, ui) {
                    var par = $(ui.placeholder).closest('.fx_tree_item');
                    if (par.length > 0 && !is_expanded(par)) {
                            expand_item(par);
                            setTimeout(function() {
                                    tree_root.nestedSortable('refreshPositions');
                            }, 100);
                    }
            },
            update: function(e,ui) {
                    fx_tree_refresh(root);
            },
            sort: function(e, ui) {
                    var p_o = ui.placeholder.offset();
                    var h_o = ui.helper.offset();
                    var too_far = 150;
                    if (Math.abs( p_o.top - h_o.top) > too_far || Math.abs(p_o.left - h_o.left) > too_far) {
                            ui.placeholder.addClass('placeholder_invalid');
                    } else {
                            ui.placeholder.removeClass('placeholder_invalid');
                    }
            },
            stop: function(e, ui) {
                    if (ui.placeholder.hasClass('placeholder_invalid')) {
                            tree_root.nestedSortable('cancel');
                            return;
                    }
                    var options = {
                            fx_admin:1, 
                            essence:'subdivision', 
                            posting:1, 
                            action:'move',
                            darged : ui.item.data('id')
                    };
                    var next_item = ui.item.next('.fx_tree_item');
                    var prev_item = ui.item.prev('.fx_tree_item');
                    if (next_item.length > 0) {
                            options.type = 'before';
                            options.target = next_item.data('id');
                    } else if (prev_item.length > 0) {
                            options.type = 'after';
                            options.target = prev_item.data('id');
                    } else {
                            options.target = ui.item.parent().closest('.fx_tree_item').data('id') || 0;
                            options.type = 'last';
                    }
                    $.post($fx.settings.action_link, options);
            }
    });
    tree_root.disableSelection();

    root.on('click', '.fx_tree_label', function(e){
        var c_row = $(this);
        if (e.target != this && !$(e.target).hasClass('fx_tree_title')) {
            return;
        }
        if (c_row.hasClass('fx_tree_groupper_label')) {
            toggle_item(c_row.closest('.fx_tree_item'));
            return;
        }
        if (e.metaKey || e.ctrlKey) {
            c_row.toggleClass('fx_admin_selected');
        } else {
            if ($(this).hasClass('fx_admin_selected') && $('.fx_tree_label.fx_admin_selected').length === 1) {
                $(this).removeClass('fx_admin_selected');
            } else {
                $('.fx_tree_label').removeClass('fx_admin_selected');
                $(this).addClass('fx_admin_selected');
            }
        }
        if (!c_row.data('id')) {
            c_row.data('id', c_row.closest('.fx_tree_item').data('id'));
        }
        root.find('.tree_value_input').val(c_row.data('id'));
        var props = c_row.closest('li').data('props');
        if (props) {
            c_row.data('essence', props.essence);
        }
        $fx.buttons.update_available_buttons();
    });

    fx_tree_refresh(root);

    for (var iid in tree_open_node) {
        if (tree_open_node[iid]) {
            expand_item( $('#fx_tree_item_'+iid, root) );
        }
    }
}

function fx_tree_refresh(root) {
	$('.fx_tree_expander', root).removeClass('fx_tree_expander_visible');
    $('ul', root).removeClass('fx_tree_is_grandpa');
	$('.fx_tree_item', root).each( function(){
		var exp = $('.fx_tree_expander', $(this)).first();
		if ($('>ul > .fx_tree_item', $(this)).length > 0) {
			exp.addClass('fx_tree_expander_visible');
            $(this).closest('ul').addClass('fx_tree_is_grandpa');
		}
	});
}
fx_tree_render(html);

<!--[tree_children]-->
<ul class="fx_tree_children<?=_o && _o.is_expanded ? ' fx_tree_children_expanded' : ''?>">
<?
var children = _c.children || _c.values;
if(children) {
	$.each(children, function(index, item) {
		print(
			$t.tree_item(item, {
					is_first:index == 0,
					is_last:index == children.length - 1
			})
		);
	});
}
?>
</ul>

<!--[tree_item]-->
<?
if (!_c.metadata) {
    _c.metadata = {};
}
var id = _c.metadata.id || _c.data;
if (typeof id === 'string') {
    id = id.replace(/[^a-z0-9_-]+/g, '_');
}
var is_expanded = _c.metadata.is_groupper;
?>
<li class="fx_tree_item
        <?=_o.is_first ? ' fx_tree_item_first' : ''?> 
            <?=_o.is_last ? ' fx_tree_item_last' : ''?>
            <?=_c.metadata.checked == 0 ? ' fx_admin_unchecked' : ''?>
        <?=_c.metadata.is_groupper == 1 ? ' fx_tree_groupper' : ''?>" 
	data-id="<?=id?>" 
        id="fx_tree_item_<?=id?>" 
        <?=$t.data_attr(_c.metadata, {key:'props'})?>
    >
	<div class="fx_tree_label<?=_c.metadata.is_groupper == 1 ? ' fx_tree_groupper_label' : ''?>">
        <span class="fx_tree_expander<?=is_expanded ? ' fx_tree_expander_expanded' : ''?>"><span></span></span>
		<a class="fx_tree_title"><?=_c.data?></a>
	</div>
	<?=$t.tree_children(_c, {is_expanded:is_expanded})?>
</li>