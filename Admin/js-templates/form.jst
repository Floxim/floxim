<!--[form_row]-->
<?
var c_class = 'field field_'+_c.type;
if (_c.class_name) {
    c_class += ' '+_c.class_name;
}

c_class += ' field_name__'+ ('' + (_c.id || _c.name || '')).replace(/[\[\]]+/g, '--').replace(/--$/, '');
if (_c.lock_edit) {
    c_class += ' fx_field_is_locked';
}
?>
<div class="<?= c_class ?>">
    <?if (_c.type !== 'raw') {?>
        <?=$t.label(_c)?>
    <?}?>
    <div class="input_container"></div>
</div>

<!--jquery-->
$('.input_container', html).append($t.jQuery('input', _c));

<!--[form_row ? ( (_c.type == 'checkbox' && typeof _c.values == 'undefined') || _c.type == 'bool' ) && _c.view_context !== 'panel']-->
<?
var c_class = 'field field_checkbox';
if (_c.class_name) {
    c_class += ' field_class_'+_c.class_name;
}
c_class += ' field_name__'+(_c.id || _c.name);
if (_c.lock_edit) {
    c_class += ' fx_field_is_locked';
}
if (!_c.id) {
    _c.id = 'checkbox_'+Math.round(Math.random() * 10000);
}
?>
<div class="<?= c_class ?>">
    <? _c.skip_label = true; ?>
    <?=$t.input(_c)?>
    <? if (_c.class !== 'toggler') {?>
    <label style="display:inline;" for="<?= _c.name || _c.id ?>"><?=_c.label?></label>
    <? } ?>
</div>

<!--[form_row ? _c.hidden_on_one_value && _c.values && _c.values.length === 1]-->
<?
    var c_value = null;
    $.each(_c.values, function() {
        c_value = this[0];
        return false;
    });
    print($t.input({type:'hidden', name:_c.name,value:c_value}));
?>

<!--[form_row ? _c.type == 'hidden' || _c.type == 'button' || _c.type == 'list' || _c.type == 'tree' || _c.type == 'icon_text']-->
<div class="field field_<?=_c.type?><?=_c.class_name ? ' '+_c.class_name : ''?> field_name__<?=_c.id || _c.name?>">
    
</div>

<!--jquery-->
html.append($t.jQuery('input', _c));

<!--[data_input]-->
<input type="hidden" value="<?=$t.clear($.toJSON(_c))?>" class="data_input" />

<!--[data_attr]-->
<?
print('data-', (_o && _o.key != undefined ? _o.key : 'inline'),	 '="', $t.clear($.toJSON(_c)), '"');
?>

<!--[label]-->
<? if (_c.label !== false && _c.label !== '') { ?>
<div class="form_label">
    <label for="<?=_c.name?>" title="<?=_c.tip?>"><?=_c.label?></label>
    <?if (_c.current) {?>
        <span class="fx_admin_current"> (<?=$fx.lang('by default')?> &mdash; <?=_c.current?>)</span>
    <?}?>
</div>
<? } ?>

<!--[field_label]-->
<label class="<?=_c.status ? 'ui-corner-all ui-state-'+_c.status : ''?>">
    <?=_c.label || _c.value?>
</label>

<!--[field_id_name]-->
name="<?=_c.name?>" id="<?=_c.name || _c.id?>"

<!--[input]-->
    <?
    var type_att = ['password','number'].indexOf(_c.type) < 0 ? 'text' : _c.type;
    var units = _c.type === 'number' && _c.units ? _c.units : null;
    var extra_class = '';
    if (_c.type === 'number' && _c.max) {
        extra_class +=' fx_input_number_';
        var max_len = (_c.max+'').length;
        if (_c.step && Math.abs(_c.step % 1) > 0) {
            max_len +=  ( (_c.step % 1)+'' ).length - 2;
        }
        for (var i = 0 ; i < max_len; i++) {
            extra_class += 'd';
        }
    }
    var autocomplete = '';
    
    if (typeof _c.autocomplete === 'boolean') {
        autocomplete = _c.autocomplete ? 'on' : 'off';
    } else if (typeof _c.autocomplete === 'string') {
        autocomplete = _c.autocomplete;
    }
    if (autocomplete !== '') {
        autocomplete = ' autocomplete="'+autocomplete+'" ';
    }
    if (!_c.value) {
        _c.value = _c.type === 'number' ? 0 : '';
    }
    var val = $t.clear( _c.value );
    ?>
	<input 
		type="<?= type_att ?>" 
                <?= _c.disabled ? ' disabled="disabled"' : ''?>
                <?= autocomplete ?>
        class="fx_input fx_input_<?=_c.type?> <?= extra_class ?>"
         <?
            if (_c.placeholder) {
            print(' placeholder="'+_c.placeholder+'" ');
            }
         ?>
		<?=$t.field_id_name(_c)?> 
		value="<?= val ?>" 
                <? if (_c.type === 'number') {
                    var num_atts = ['min','max','step'];
                    if (units) {
                        print(' data-units="'+units+'" ');
                    }
                    for (var i = 0; i < num_atts.length; i++) {
                        if (_c[num_atts[i]] !== undefined) {
                            print(num_atts[i] + '="'+_c[num_atts[i]]+'" ');
                        }
                    }
                } ?>
                />
    <? if ( units ) { ?>
        <span class="fx_number_field_units"> <?= units ?> </span>
    <? } ?>

                
<!--[input ? _c.type == 'html']-->
<span class="fx_input__type_html"><?=_c.value?></span>
                
<!--[input ? _c.type == 'hidden']-->
<input <?=$t.field_id_name(_c)?> value="<?=_c.value === false ? '' : $t.clear(_c.value)?>" type="hidden" />


<!--[input ? (_c.field_type == 'textarea' || (_c.type === 'text' && _c.wysiwyg) ) ]-->
<?
var c_val = _c.value || '';
if (typeof c_val !== 'string') {
    c_val = JSON.stringify(c_val, undefined, 2);
}
c_val = $t.clear(c_val);
?>
<div class="fx_textarea_container">
<textarea 
    <?=$t.field_id_name(_c)?>
    class="<?=
        _c.wysiwyg ? 'fx_wysiwyg redactor_editor_styled ' : 'fx_input'
        ?> <?=
        _c.code ? 'fx_code fx_code_'+_c.code : ''?>"
        ><?=c_val?></textarea>
</div>

<!--jquery-->

if (!_c.wysiwyg && !_c.code) {
    autosize( $('textarea', html) );
}

function set_snippet(val) {
    var $temp_container = $('<div />');
    $temp_container.html(val);
    var text = $temp_container.text().replace(/^\s+/, '').slice(0, 20)+'...';
    $('.fx_panel_text_expander', html).html(text);
}
if (_o.hide_in_panel) {
    set_snippet(_c.value);
}

if (_c.view_context !== 'panel') {
    //setTimeout(function() {
        $fx_fields.make_redactor(
            $('textarea.fx_wysiwyg', html), 
            {buttonSource:true, linebreaks: (_c.nl2br && _c.nl2br !== '0')}
        );
        var $box = html.find('.redactor-box'),
            $container = html,
            $editor = html.find('.redactor-editor'),
            $toolbar = html.find('.redactor-toolbar');
        
        $editor.addClass('redactor_fx_wysiwyg');
        $toolbar.attr('style', '');
            
        $editor.on('focus', function() {
            if ($container.closest('#fx_admin_control').length === 0) {
                return;
            }
            $container.addClass('fx_textarea_container_redactor_focused').css('height', '');
            var $buttons = $toolbar.find('>li');
            var toolbar_width = $buttons.length * $buttons.first().outerWidth();
            $toolbar.css('position', 'absolute');
            var toolbar_offset = toolbar_width + $toolbar.offset().left - $(window).width();
            if (toolbar_offset > 0) {
                $toolbar.css({
                    position:'absolute',
                    left:'-'+(toolbar_offset+15)+'px'
                });
            }
            $toolbar.css('width', toolbar_width);
        }).on('blur', function() {
            setTimeout(function() {
                var $focused = $(document.activeElement);
                var $focused_box = $focused.closest('.redactor-box');
                if (!$focused_box.length || $focused_box[0] !== $box[0]) {
                    $editor.closest('.fx_textarea_container').removeClass('fx_textarea_container_redactor_focused');
                }
            },10);
        });
    //},50);
} else {
    var expander = $('.fx_panel_text_expander', html);
    expander.click(function() {
        var real_ta = $('textarea.fx_wysiwyg', html);
        var ta = real_ta.clone();
        if (expander.data('popup')) {
            return;
        }
        
        var popup = new $fx.popup({
            target:this,
            maxWidth:500,
            onfinish:function() {
                var res = ta.redactor('code.get');
                $('textarea.fx_wysiwyg', html).val(res).html(res);
                set_snippet(res);
                ta.redactor('core.destroy');
            }
        });
        popup.$body.append(ta);
        ta.redactor({minHeight:300,autoresize:false});
        popup.position();
    });
}

html.find('textarea.fx_code').each( function(){
    var code_type = this.className.match(/fx_code_([^\s]+)/)[1];
    var $textarea = $(this);
    
    var config_map = {
        html:'htmlmixed',
        php:'php',
        css:'css'
    };

    code_type = config_map[code_type] || 'php';

    var config = {
        mode:code_type,
        lineNumbers: true,
        matchBrackets: true,
        tabMode: "indent",
        electricChars: false,
        smartIndent: false
    };
    var cCodeMirror = CodeMirror.fromTextArea(this, config);
    
    $textarea.data('codemirror', cCodeMirror);
    
    setTimeout(function() {
        var $container = $textarea.closest('#fx_admin_content');
        if ($container.length > 0) {
            var fix_cm_size = function() {
                setTimeout( function() {
                    var max_height = $container.outerHeight() - 150;
                    $(cCodeMirror.getScrollerElement()).css('max-height', max_height);
                    cCodeMirror.refresh();
                }, 50);
            }
            $container.resize(fix_cm_size);
        }
        var $tab = $textarea.closest('.fx_tab_data');
        $tab.on('fx_tab_focus', function()  {
            cCodeMirror.refresh();
        });
        cCodeMirror.refresh();
    },50);

    var save_cm_fields = function() {
        $('textarea.fx_code', $(this)).each(function() {
            $(this).data('codemirror').save();
        });
        return false;
    };

    $(document.body).off('fx_form_submit.save_cm_fields').on('fx_form_submit.save_cm_fields', 'form', save_cm_fields);
    
    cCodeMirror.on('change', function() {
        cCodeMirror.save();
    })
    cCodeMirror.on('keydown', function(cm, e) {
        if (e.which === 13 && (e.metaKey || e.ctrlKey)) {
            e.preventDefault();
            $textarea.trigger('change');
        }
    });
});

<!--[input ? _c.type == 'select']-->
<select 
    id="<?=_c.id? _c.id : _c.name?>"
    name="<?=_c.name+(_c.multiple? '[]' : '')?>"
    class="fx_input<?=_c.inline ? ' inline' : ''?> <?=_c.extendable ? ' extendable' : ''?>"
    <?= _c.disabled ? ' disabled="disabled" ' : ''?>
    <?=_c.multiple ? ' multiple="multiple"' : ''?>>
    <?
    if (_c.values instanceof Array) {
        var tmp_values = {};
        for (var vi = 0; vi < _c.values.length; vi++) {
            tmp_values[_c.values[vi]] = _c.values[vi];
        }
        _c.values = tmp_values;
    }
    for (var vk in _c.values) {
        var val = _c.values[vk], opt_name = null;
        if (typeof val === 'string' || typeof val === 'number') {
            var opt_val = vk;
            var opt_name = val;
        } else if (val instanceof Array) {
            var opt_val = val[0];
            var opt_name = val[1];
        }

        if (opt_name !== null) {
            var is_selected = opt_val == _c.value || ( _c.value instanceof Array  && $.inArray(opt_val, _c.value) > -1);
            ?><option value="<?=opt_val?>"<?=is_selected ? ' selected="selected"':  ''?>><?=opt_name?></option><?
        }
    }?>
</select>

<!--[input ? _c.type == 'radio']-->
<div class="fx_admin_group">
    <?
    var i = 0;
    if (! (_c.values instanceof Array) ) {
        var values = [];
        for (var vk in _c.values) {
            values.push([vk, _c.values[vk]]);
        }
    } else {
        values = _c.values;
    }
    var c_value = _c.value || _c.default;
    for (var i = 0; i < values.length; i++) {
        var vk = values[i][0],
            vv = values[i][1],
            is_checked = (c_value == vk) || (!c_value && _c.selected_first && i == 1);
        ?>
            <label class="fx_admin_radio_label">
                <input 
                    type="radio" 
                    value="<?=vk?>" 
                    id="<?=_c.name+'_'+vk?>"
                    name="<?=_c.name?>"
                    <?=is_checked  ? ' checked="checked"' : ''?>>
                    <?=vv?>
            </label>
        <?
    }?>
</div>

<!--[input ? (_c.type == 'checkbox' && typeof _c.values == 'undefined') || _c.type == 'bool']-->

<input 
    type="checkbox"
    style="display:inline;" 
    data-fx-unchecked-value="0"
    <?=$t.field_id_name(_c)?> 
    value="1" <?=_c.value && _c.value !== '0' ? ' checked="checked"' : ''?> 
    <?= _c.disabled ? ' disabled="disabled" ' : '' ?> />
<?
if (!_c.skip_label) {
    ?><label for="<?=_c.name || _c.id?>"></label><? 
} 
?>

<!--[input ? (_c.type === 'checkbox' || _c.type === 'bool') && _c.class === 'toggler']-->
<?
var on = _c.value && _c.value !== '0';
?>
<div class="fx_toggler fx_toggler_<?= on ? 'on' : 'off'?>">
    <input type="hidden" <?=$t.field_id_name(_c)?> value="<?= on ? 1 : 0 ?>" />
    <div class="fx_toggler__label">
        <label><?=_c.label?></label>
        <div class="fx_toggler__state_on"><?= $fx.lang('On') ?></div>
        <div class="fx_toggler__state_off"><?= $fx.lang('Off') ?></div>
    </div>
    <div class="fx_toggler__control" tabindex="0">
        <div class="fx_toggler__runner"></div>       
    </div>
</div>

<!--priority-->
2

<!--[input ? _c.type == 'checkbox' && typeof _c.values != 'undefined' ]-->
<div class="fx_admin_group fx_admin_multi_checkbox">
    <?
    for (var vk in _c.values) {
        var iid = _c.name+'_'+vk;
        var is_checked = (_c.value instanceof Array && $.inArray(vk, _c.value) > -1) || ( _c.value == vk);
        ?>
        <div class="val">
            <input 
                style="display:inline;" 
                type="checkbox"
                id="<?=iid?>" name="<?=_c.name?>[]" 
                value="<?=vk?>" 
                <?=is_checked ? ' checked="checked"' : ''?> />
            <label class="fx_admin_checkbox_label" for="<?=iid?>"><?=_c.values[vk]?></label>
        </div>
    <?}?>
</div>

<!--[form_cols]-->
<?
var count_cols = 0;
for (var i in _c.tabs) {
    count_cols++;
}
?>
<table class="fx_form_cols_table fx_form_<?=count_cols?>_cols">
    <tr>
    <?
    $.each(_c.tabs, function(k,v) {
        ?>
        <td 
            class="fx_tab_data fx_tab_data_<?=k?>" 
            id="<?=_c.form.id?>_<?=k?>">
        </td>
        <?
    });
    ?>
    </tr>
</table>

<!--jquery-->
$('td', html).first().addClass('fx_tab_data_first');
$('td', html).last().addClass('fx_tab_data_last');

<!--[form_row ? _c.type === 'joined_group' && _c.join_type === 'tabs']-->
<div class="field field_<?=_c.type?>">
    <div class="form_label fx_group_labels">  
    <?
    var is_first_visible = null;
    var first_visible_index = null;
    $.each(_c.fields, function(index, field) {
        if (is_first_visible === null) {
            if (field.type !== 'hidden') {
                is_first_visible = true;
                first_visible_index = index;
            }
        } else {
            is_first_visible = false;
        }
        ?>
        <label class="fx_group_label<?= is_first_visible ? ' fx_group_label_active' : '' ?>"><?=field.label?></label>
        <?
        if (index !== _c.fields.length - 1 && field.type !== 'hidden') {?>
        <span class="fx_group_label_separator"> & </span>
        <?}
    });
    ?>
    </div>
    <div class="input_container">
        <?
        $.each(_c.fields, function(index, field) {
            ?>
            <div class="fx_group_input" style="display:<?= index === first_visible_index ? 'block' : 'none'?>">
            
            </div>
            <?
        });
        ?>
    </div>
</div>

<!--jquery-->
var $containers = html.find('.fx_group_input');
var $labels = html.find('label');

$.each(_c.fields, function(index, item) {
    var $input_node = $t.jQuery('input', item);
    var $input_label = $labels.eq(index);
    var $input = $input_node.add($input_label);
    $input = $input.add($input_label.prev('.fx_group_label_separator').first());
    item.$input = $input;
    $containers.eq(index).append($input_node );
});

$labels.on('click', function() {
    var $l = $(this);
    $labels.removeClass('fx_group_label_active');
    $l.addClass('fx_group_label_active');
    $containers.hide();
    var $c_container = $containers.eq( $labels.index(this) );
    $c_container.show().find(':input').focus();
});

<!--[form_row ? _c.type === 'joined_group' && _c.join_type === 'line']-->
<div class="field field_<?=_c.type?> field_group-type_line">
    <div class="input_container">
        <?
        $.each(_c.fields, function(index, field) {
            ?>
            <div class="fx_group_input">
            
            </div>
            <?
        });
        ?>
    </div>
</div>

<!--jquery-->
var $containers = html.find('.fx_group_input');

$.each(_c.fields, function(index, item) {
    //var $input_node = $t.jQuery('form_row', item);
    //var $input_node = $fx_fields.row(item);
    var $input_node = $fx_form.draw_field(item, $containers.eq(index));
    item.$input = $input_node;
    //$containers.eq(index).append($input_node );
});

function recount_groups() {
    var $vis = $containers.find('.field').filter(':visible'),
        margin = 2,
        width = (100 - margin * ($vis.length - 1)) / $vis.length;
        
    $vis.parent().css({
        width:width+'%',
        'margin-right':margin+'%',
        float:'left'
    });
    $vis.last().parent().css('margin-right', 0);
}

recount_groups();
html.on('fx_show_input fx_hide_input', recount_groups);

<!--[input ? _c.class_name === 'fx_field_limit']-->
<div>
    <input 
        class="fx_input fx_input_limit" 
        <?=$t.field_id_name(_c)?> 
        <? if( !_c.value) {?>disabled="disabled"<?} else {?>value="<?=_c.value?>"<?}?>
         />
    <span class="field_checkbox">
        <input type="checkbox" id="fx_checkbox_limit_all" <? if( !_c.value) {?>checked="checked"<?}?> class="fx_limit_all" />
        <label for="fx_checkbox_limit_all">
            <?= $fx.lang('All?') ?>
        </label>
    </span>
</div>

<!--jquery-->
var $inp = html.find('.fx_input_limit');
$inp.data('stored_value', $inp.val());
$inp.on('keyup', function() {
    if ($inp.val() !== $inp.data('stored_value')) {
        $inp.data('stored_value', $inp.val());
        $inp.trigger('change');
    }
});

html.on('change', '.fx_limit_all', function() {
    var stored = $inp.data('stored_value');
    var val = $inp.val();
    
    if (this.checked) {
        $inp.data('stored_value', $inp.val());
        $inp.val('');
        $inp.attr('disabled', 'disabled');
        if (val) {
            $inp.trigger('change');
        }
        return false;
    }
    var changed = $inp.val() !== stored;
    $inp.val( stored );
    $inp.attr('disabled', null);
    $inp.focus().select();
    if (changed) {
        $inp.trigger('change');
    }
    return false;
});

<!--[input ? _c.type == 'raw']-->
<div class="field_raw__value field_raw__name-<?=_c.name?>"><?= _c.value ?></div>

<!--[input ? _c.type == 'condition']-->
<div></div>

<!--jquery-->
new condition_builder( $.extend({}, _c, {$node: html}) );

<!--[input ? _c.type == 'css-font']-->
<div class="fx-css-font-field">
    <input type="hidden" name="<?= _c.name ?>" class="fx-css-font-field__value" value="<?= _c.value ?>" />
     <div class="fx-css-font-field__controls">

     </div>
</div>